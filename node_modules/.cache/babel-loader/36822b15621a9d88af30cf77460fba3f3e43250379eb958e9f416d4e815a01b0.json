{"ast":null,"code":"import { getApp, _getProvider, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, createMockUserToken, getModularInstance } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\n/**\r\n * Domain name for firebase storage.\r\n */\nconst DEFAULT_HOST = 'firebasestorage.googleapis.com';\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\nconst CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\nconst DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\nconst DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\nclass StorageError extends FirebaseError {\n  /**\r\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\r\n   *  added to the end of the message.\r\n   * @param message  - Error message.\r\n   */\n  constructor(code, message) {\n    super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\n    /**\r\n     * Stores custom error data unque to StorageError.\r\n     */\n    this.customData = {\n      serverResponse: null\n    };\n    this._baseMessage = this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n  /**\r\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\r\n   */\n  _codeEquals(code) {\n    return prependCode(code) === this.code;\n  }\n  /**\r\n   * Optional response message that was added by the server.\r\n   */\n  get serverResponse() {\n    return this.customData.serverResponse;\n  }\n  set serverResponse(serverResponse) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\nfunction prependCode(code) {\n  return 'storage/' + code;\n}\nfunction unknown() {\n  const message = 'An unknown error occurred, please check the error payload for ' + 'server response.';\n  return new StorageError(\"unknown\" /* UNKNOWN */, message);\n}\nfunction objectNotFound(path) {\n  return new StorageError(\"object-not-found\" /* OBJECT_NOT_FOUND */, \"Object '\" + path + \"' does not exist.\");\n}\nfunction quotaExceeded(bucket) {\n  return new StorageError(\"quota-exceeded\" /* QUOTA_EXCEEDED */, \"Quota for bucket '\" + bucket + \"' exceeded, please view quota on \" + 'https://firebase.google.com/pricing/.');\n}\nfunction unauthenticated() {\n  const message = 'User is not authenticated, please authenticate using Firebase ' + 'Authentication and try again.';\n  return new StorageError(\"unauthenticated\" /* UNAUTHENTICATED */, message);\n}\nfunction unauthorizedApp() {\n  return new StorageError(\"unauthorized-app\" /* UNAUTHORIZED_APP */, 'This app does not have permission to access Firebase Storage on this project.');\n}\nfunction unauthorized(path) {\n  return new StorageError(\"unauthorized\" /* UNAUTHORIZED */, \"User does not have permission to access '\" + path + \"'.\");\n}\nfunction retryLimitExceeded() {\n  return new StorageError(\"retry-limit-exceeded\" /* RETRY_LIMIT_EXCEEDED */, 'Max retry time for operation exceeded, please try again.');\n}\nfunction canceled() {\n  return new StorageError(\"canceled\" /* CANCELED */, 'User canceled the upload/download.');\n}\nfunction invalidUrl(url) {\n  return new StorageError(\"invalid-url\" /* INVALID_URL */, \"Invalid URL '\" + url + \"'.\");\n}\nfunction invalidDefaultBucket(bucket) {\n  return new StorageError(\"invalid-default-bucket\" /* INVALID_DEFAULT_BUCKET */, \"Invalid default bucket '\" + bucket + \"'.\");\n}\nfunction noDefaultBucket() {\n  return new StorageError(\"no-default-bucket\" /* NO_DEFAULT_BUCKET */, 'No default bucket ' + \"found. Did you set the '\" + CONFIG_STORAGE_BUCKET_KEY + \"' property when initializing the app?\");\n}\nfunction cannotSliceBlob() {\n  return new StorageError(\"cannot-slice-blob\" /* CANNOT_SLICE_BLOB */, 'Cannot slice blob for upload. Please retry the upload.');\n}\nfunction serverFileWrongSize() {\n  return new StorageError(\"server-file-wrong-size\" /* SERVER_FILE_WRONG_SIZE */, 'Server recorded incorrect upload file size, please retry the upload.');\n}\nfunction noDownloadURL() {\n  return new StorageError(\"no-download-url\" /* NO_DOWNLOAD_URL */, 'The given file does not have any download URLs.');\n}\n/**\r\n * @internal\r\n */\nfunction invalidArgument(message) {\n  return new StorageError(\"invalid-argument\" /* INVALID_ARGUMENT */, message);\n}\nfunction appDeleted() {\n  return new StorageError(\"app-deleted\" /* APP_DELETED */, 'The Firebase app was deleted.');\n}\n/**\r\n * @param name - The name of the operation that was invalid.\r\n *\r\n * @internal\r\n */\nfunction invalidRootOperation(name) {\n  return new StorageError(\"invalid-root-operation\" /* INVALID_ROOT_OPERATION */, \"The operation '\" + name + \"' cannot be performed on a root reference, create a non-root \" + \"reference using child, such as .child('file.png').\");\n}\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\nfunction invalidFormat(format, message) {\n  return new StorageError(\"invalid-format\" /* INVALID_FORMAT */, \"String does not match format '\" + format + \"': \" + message);\n}\n/**\r\n * @param message - A message describing the internal error.\r\n */\nfunction internalError(message) {\n  throw new StorageError(\"internal-error\" /* INTERNAL_ERROR */, 'Internal error: ' + message);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\nclass Location {\n  constructor(bucket, path) {\n    this.bucket = bucket;\n    this.path_ = path;\n  }\n  get path() {\n    return this.path_;\n  }\n  get isRoot() {\n    return this.path.length === 0;\n  }\n  fullServerUrl() {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n  bucketOnlyServerUrl() {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n  static makeFromBucketSpec(bucketString, host) {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n  static makeFromUrl(url, host) {\n    let location = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n    function gsModify(loc) {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = {\n      bucket: 1,\n      path: 3\n    };\n    function httpModify(loc) {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');\n    const firebaseStorageIndices = {\n      bucket: 1,\n      path: 3\n    };\n    const cloudStorageHost = host === DEFAULT_HOST ? '(?:storage.googleapis.com|storage.cloud.google.com)' : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');\n    const cloudStorageIndices = {\n      bucket: 1,\n      path: 2\n    };\n    const groups = [{\n      regex: gsRegex,\n      indices: gsIndices,\n      postModify: gsModify\n    }, {\n      regex: firebaseStorageRegExp,\n      indices: firebaseStorageIndices,\n      postModify: httpModify\n    }, {\n      regex: cloudStorageRegExp,\n      indices: cloudStorageIndices,\n      postModify: httpModify\n    }];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n\n/**\r\n * A request whose promise always fails.\r\n */\nclass FailRequest {\n  constructor(error) {\n    this.promise_ = Promise.reject(error);\n  }\n  /** @inheritDoc */\n  getPromise() {\n    return this.promise_;\n  }\n  /** @inheritDoc */\n  cancel(_appDelete = false) {}\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @param f May be invoked\r\n *     before the function returns.\r\n * @param callback Get all the arguments passed to the function\r\n *     passed to f, including the initial boolean.\r\n */\nfunction start(f,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ncallback, timeout) {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let retryTimeoutId = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let globalTimeoutId = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n  function canceled() {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n  function triggerCallback(...args) {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n  function callWithDelay(millis) {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n  function clearGlobalTimeout() {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n  function handler(success, ...args) {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n  function stop(wasTimeout) {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    clearGlobalTimeout();\n    if (triggeredCallback) {\n      return;\n    }\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\nfunction stop(id) {\n  id(false);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isJustDef(p) {\n  return p !== void 0;\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isFunction(p) {\n  return typeof p === 'function';\n}\nfunction isNonArrayObject(p) {\n  return typeof p === 'object' && !Array.isArray(p);\n}\nfunction isString(p) {\n  return typeof p === 'string' || p instanceof String;\n}\nfunction isNativeBlob(p) {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\nfunction isNativeBlobDefined() {\n  return typeof Blob !== 'undefined';\n}\nfunction validateNumber(argument, minValue, maxValue, value) {\n  if (value < minValue) {\n    throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\n  }\n  if (value > maxValue) {\n    throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction makeUrl(urlPart, host, protocol) {\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\nfunction makeQueryString(params) {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\nvar ErrorCode;\n(function (ErrorCode) {\n  ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\n  ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\n  ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\n})(ErrorCode || (ErrorCode = {}));\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Handles network logic for all Storage Requests, including error reporting and\r\n * retries with backoff.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param - O the output type used by the rest of the SDK. The conversion\r\n * happens in the specified `callback_`.\r\n */\nclass NetworkRequest {\n  constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_) {\n    this.url_ = url_;\n    this.method_ = method_;\n    this.headers_ = headers_;\n    this.body_ = body_;\n    this.successCodes_ = successCodes_;\n    this.additionalRetryCodes_ = additionalRetryCodes_;\n    this.callback_ = callback_;\n    this.errorCallback_ = errorCallback_;\n    this.timeout_ = timeout_;\n    this.progressCallback_ = progressCallback_;\n    this.connectionFactory_ = connectionFactory_;\n    this.pendingConnection_ = null;\n    this.backoffId_ = null;\n    this.canceled_ = false;\n    this.appDelete_ = false;\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n  /**\r\n   * Actually starts the retry loop.\r\n   */\n  start_() {\n    const doTheRequest = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n      const progressListener = progressEvent => {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (this.progressCallback_ !== null) {\n          this.progressCallback_(loaded, total);\n        }\n      };\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n      // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection.send(this.url_, this.method_, this.body_, this.headers_).then(() => {\n        if (this.progressCallback_ !== null) {\n          connection.removeUploadProgressListener(progressListener);\n        }\n        this.pendingConnection_ = null;\n        const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n        const status = connection.getStatus();\n        if (!hitServer || this.isRetryStatusCode_(status)) {\n          const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n          backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\n          return;\n        }\n        const successCode = this.successCodes_.indexOf(status) !== -1;\n        backoffCallback(true, new RequestEndStatus(successCode, connection));\n      });\n    };\n    /**\r\n     * @param requestWentThrough - True if the request eventually went\r\n     *     through, false if it hit the retry limit or was canceled.\r\n     */\n    const backoffDone = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection;\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n  /** @inheritDoc */\n  getPromise() {\n    return this.promise_;\n  }\n  /** @inheritDoc */\n  cancel(appDelete) {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n  isRetryStatusCode_(status) {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [\n    // Request Timeout: web server didn't receive full request in time.\n    408,\n    // Too Many Requests: you're getting rate-limited, basically.\n    429];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n}\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\nclass RequestEndStatus {\n  constructor(wasSuccessCode, connection, canceled) {\n    this.wasSuccessCode = wasSuccessCode;\n    this.connection = connection;\n    this.canceled = !!canceled;\n  }\n}\nfunction addAuthHeader_(headers, authToken) {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\nfunction addVersionHeader_(headers, firebaseVersion) {\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\n}\nfunction addGmpidHeader_(headers, appId) {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\nfunction addAppCheckHeader_(headers, appCheckToken) {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion) {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction getBlobBuilder() {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\nfunction getBlob$1(...args) {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\"unsupported-environment\" /* UNSUPPORTED_ENVIRONMENT */, \"This browser doesn't seem to support creating Blobs\");\n    }\n  }\n}\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Converts a Base64 encoded string to a binary string. */\nfunction decodeBase64(encoded) {\n  return atob(encoded);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\nconst StringFormat = {\n  /**\r\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n   * sequence.\r\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n   */\n  RAW: 'raw',\n  /**\r\n   * Indicates the string should be interpreted as base64-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64: 'base64',\n  /**\r\n   * Indicates the string should be interpreted as base64url-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64URL: 'base64url',\n  /**\r\n   * Indicates the string is a data URL, such as one obtained from\r\n   * canvas.toDataURL().\r\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n   * becomes the byte sequence\r\n   * 69 a6 9a\r\n   * (the content-type \"application/octet-stream\" is also applied, but can\r\n   * be overridden in the metadata object).\r\n   */\n  DATA_URL: 'data_url'\n};\nclass StringData {\n  constructor(data, contentType) {\n    this.data = data;\n    this.contentType = contentType || null;\n  }\n}\n/**\r\n * @internal\r\n */\nfunction dataFromString(format, stringData) {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\n    // do nothing\n  }\n  // assert(false);\n  throw unknown();\n}\nfunction utf8Bytes_(value) {\n  const b = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | c >> 6, 128 | c & 63);\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | (hi & 1023) << 10 | lo & 1023;\n            b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\nfunction percentEncodedBytes_(value) {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\nfunction base64Bytes_(format, value) {\n  switch (format) {\n    case StringFormat.BASE64:\n      {\n        const hasMinus = value.indexOf('-') !== -1;\n        const hasUnder = value.indexOf('_') !== -1;\n        if (hasMinus || hasUnder) {\n          const invalidChar = hasMinus ? '-' : '_';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64url encoded?\");\n        }\n        break;\n      }\n    case StringFormat.BASE64URL:\n      {\n        const hasPlus = value.indexOf('+') !== -1;\n        const hasSlash = value.indexOf('/') !== -1;\n        if (hasPlus || hasSlash) {\n          const invalidChar = hasPlus ? '+' : '/';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\n        }\n        value = value.replace(/-/g, '+').replace(/_/g, '/');\n        break;\n      }\n    // do nothing\n  }\n\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\nclass DataURLParts {\n  constructor(dataURL) {\n    this.base64 = false;\n    this.contentType = null;\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64 ? middle.substring(0, middle.length - ';base64'.length) : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\nfunction dataURLBytes_(dataUrl) {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\nfunction dataURLContentType_(dataUrl) {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\nfunction endsWith(s, end) {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n  return s.substring(s.length - end.length) === end;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\nclass FbsBlob {\n  constructor(data, elideCopy) {\n    let size = 0;\n    let blobType = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data;\n      size = data.size;\n      blobType = data.type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n  size() {\n    return this.size_;\n  }\n  type() {\n    return this.type_;\n  }\n  slice(startByte, endByte) {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\n      return new FbsBlob(slice, true);\n    }\n  }\n  static getBlob(...args) {\n    if (isNativeBlobDefined()) {\n      const blobby = args.map(val => {\n        if (val instanceof FbsBlob) {\n          return val.data_;\n        } else {\n          return val;\n        }\n      });\n      return new FbsBlob(getBlob$1.apply(null, blobby));\n    } else {\n      const uint8Arrays = args.map(val => {\n        if (isString(val)) {\n          return dataFromString(StringFormat.RAW, val).data;\n        } else {\n          // Blobs don't exist, so this has to be a Uint8Array.\n          return val.data_;\n        }\n      });\n      let finalLength = 0;\n      uint8Arrays.forEach(array => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach(array => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n  uploadData() {\n    return this.data_;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\nfunction jsonObjectOrNull(s) {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\n/**\r\n * @return Null if the path is already at the root.\r\n */\nfunction parent(path) {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\nfunction child(path, childPath) {\n  const canonicalChildPath = childPath.split('/').filter(component => component.length > 0).join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\nfunction lastComponent(path) {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction noXform_(metadata, value) {\n  return value;\n}\nclass Mapping {\n  constructor(server, local, writable, xform) {\n    this.server = server;\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\nlet mappings_ = null;\nfunction xformPath(fullPath) {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\nfunction getMappings() {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings = [];\n  mappings.push(new Mapping('bucket'));\n  mappings.push(new Mapping('generation'));\n  mappings.push(new Mapping('metageneration'));\n  mappings.push(new Mapping('name', 'fullPath', true));\n  function mappingsXformPath(_metadata, fullPath) {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n  /**\r\n   * Coerces the second param to a number, if it is defined.\r\n   */\n  function xformSize(_metadata, size) {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping('timeCreated'));\n  mappings.push(new Mapping('updated'));\n  mappings.push(new Mapping('md5Hash', null, true));\n  mappings.push(new Mapping('cacheControl', null, true));\n  mappings.push(new Mapping('contentDisposition', null, true));\n  mappings.push(new Mapping('contentEncoding', null, true));\n  mappings.push(new Mapping('contentLanguage', null, true));\n  mappings.push(new Mapping('contentType', null, true));\n  mappings.push(new Mapping('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\nfunction addRef(metadata, service) {\n  function generateRef() {\n    const bucket = metadata['bucket'];\n    const path = metadata['fullPath'];\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', {\n    get: generateRef\n  });\n}\nfunction fromResource(service, resource, mappings) {\n  const metadata = {};\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\n  }\n  addRef(metadata, service);\n  return metadata;\n}\nfunction fromResourceString(service, resourceString, mappings) {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj;\n  return fromResource(service, resource, mappings);\n}\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens = obj['downloadTokens'];\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map(token => {\n    const bucket = metadata['bucket'];\n    const path = metadata['fullPath'];\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\nfunction toResourceString(metadata, mappings) {\n  const resource = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\nfunction fromBackendResponse(service, bucket, resource) {\n  const listResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\n      listResult.prefixes.push(reference);\n    }\n  }\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(new Location(bucket, item['name']));\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\nfunction fromResponseString(service, bucket, resourceString) {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj;\n  return fromBackendResponse(service, bucket, resource);\n}\n\n/**\r\n * Contains a fully specified request.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param O - the output response type used by the rest of the SDK.\r\n */\nclass RequestInfo {\n  constructor(url, method,\n  /**\r\n   * Returns the value with which to resolve the request's promise. Only called\r\n   * if the request is successful. Throw from this function to reject the\r\n   * returned Request's promise with the thrown error.\r\n   * Note: The XhrIo passed to this function may be reused after this callback\r\n   * returns. Do not keep a reference to it in any way.\r\n   */\n  handler, timeout) {\n    this.url = url;\n    this.method = method;\n    this.handler = handler;\n    this.timeout = timeout;\n    this.urlParams = {};\n    this.headers = {};\n    this.body = null;\n    this.errorHandler = null;\n    /**\r\n     * Called with the current number of bytes uploaded and total size (-1 if not\r\n     * computable) of the request body (i.e. used to report upload progress).\r\n     */\n    this.progressCallback = null;\n    this.successCodes = [200];\n    this.additionalRetryCodes = [];\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Throws the UNKNOWN StorageError if cndn is false.\r\n */\nfunction handlerCheck(cndn) {\n  if (!cndn) {\n    throw unknown();\n  }\n}\nfunction metadataHandler(service, mappings) {\n  function handler(xhr, text) {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata;\n  }\n  return handler;\n}\nfunction listHandler(service, bucket) {\n  function handler(xhr, text) {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult;\n  }\n  return handler;\n}\nfunction downloadUrlHandler(service, mappings) {\n  function handler(xhr, text) {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\n  }\n  return handler;\n}\nfunction sharedErrorHandler(location) {\n  function errorHandler(xhr, err) {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      if (\n      // This exact message string is the only consistent part of the\n      // server's error response that identifies it as an App Check error.\n      xhr.getErrorText().includes('Firebase App Check token is invalid')) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\nfunction objectErrorHandler(location) {\n  const shared = sharedErrorHandler(location);\n  function errorHandler(xhr, err) {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\nfunction getMetadata$2(service, location, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\n  const urlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, (_, data) => data, timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n  }\n\n  return requestInfo;\n}\nfunction getDownloadUrl(service, location, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction updateMetadata$2(service, location, metadata, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = {\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction deleteObject$2(service, location) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n  function handler(_xhr, _text) {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction determineContentType_(metadata, blob) {\n  return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';\n}\nfunction metadataForUpload_(location, blob, metadata) {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\nfunction multipartUpload(service, location, mappings, blob, metadata) {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n  function genBoundary() {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart = '--' + boundary + '\\r\\n' + 'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' + metadataString + '\\r\\n--' + boundary + '\\r\\n' + 'Content-Type: ' + metadata_['contentType'] + '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams = {\n    name: metadata_['fullPath']\n  };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\nclass ResumableUploadStatus {\n  constructor(current, total, finalized, metadata) {\n    this.current = current;\n    this.total = total;\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\nfunction checkResumeHeader_(xhr, allowed) {\n  let status = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status;\n}\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams = {\n    name: metadataForUpload['fullPath']\n  };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n  function handler(xhr) {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\nfunction getResumableUploadStatus(service, location, url, blob) {\n  const headers = {\n    'X-Goog-Upload-Command': 'query'\n  };\n  function handler(xhr) {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\nconst RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  function handler(xhr, text) {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An event that is triggered on a task.\r\n * @internal\r\n */\nconst TaskEvent = {\n  /**\r\n   * For this event,\r\n   * <ul>\r\n   *   <li>The `next` function is triggered on progress updates and when the\r\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n   *       argument.</li>\r\n   *   <li>The `error` function is triggered if the upload is canceled or fails\r\n   *       for another reason.</li>\r\n   *   <li>The `complete` function is triggered if the upload completes\r\n   *       successfully.</li>\r\n   * </ul>\r\n   */\n  STATE_CHANGED: 'state_changed'\n};\n// type keys = keyof TaskState\n/**\r\n * Represents the current state of a running upload.\r\n * @internal\r\n */\nconst TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\nfunction taskStateFromInternalTaskState(state) {\n  switch (state) {\n    case \"running\" /* RUNNING */:\n    case \"pausing\" /* PAUSING */:\n    case \"canceling\" /* CANCELING */:\n      return TaskState.RUNNING;\n    case \"paused\" /* PAUSED */:\n      return TaskState.PAUSED;\n    case \"success\" /* SUCCESS */:\n      return TaskState.SUCCESS;\n    case \"canceled\" /* CANCELED */:\n      return TaskState.CANCELED;\n    case \"error\" /* ERROR */:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass Observer {\n  constructor(nextOrObserver, error, complete) {\n    const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver;\n      this.error = error !== null && error !== void 0 ? error : undefined;\n      this.complete = complete !== null && complete !== void 0 ? complete : undefined;\n    } else {\n      const observer = nextOrObserver;\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction async(f) {\n  return (...argsToForward) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** An override for the text-based Connection. Used in tests. */\nlet textFactoryOverride = null;\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\nclass XhrConnection {\n  constructor() {\n    this.sent_ = false;\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n  send(url, method, body, headers) {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n  getErrorCode() {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n  getStatus() {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n  getResponse() {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n    return this.xhr_.response;\n  }\n  getErrorText() {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n    return this.xhr_.statusText;\n  }\n  /** Aborts the request. */\n  abort() {\n    this.xhr_.abort();\n  }\n  getResponseHeader(header) {\n    return this.xhr_.getResponseHeader(header);\n  }\n  addUploadProgressListener(listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n  removeUploadProgressListener(listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\nclass XhrTextConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'text';\n  }\n}\nfunction newTextConnection() {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\nclass XhrBytesConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n}\nfunction newBytesConnection() {\n  return new XhrBytesConnection();\n}\nclass XhrBlobConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'blob';\n  }\n}\nfunction newBlobConnection() {\n  return new XhrBlobConnection();\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\nclass UploadTask {\n  /**\r\n   * @param ref - The firebaseStorage.Reference object this task came\r\n   *     from, untyped to avoid cyclic dependencies.\r\n   * @param blob - The blob to upload.\r\n   */\n  constructor(ref, blob, metadata = null) {\n    /**\r\n     * Number of bytes transferred so far.\r\n     */\n    this._transferred = 0;\n    this._needToFetchStatus = false;\n    this._needToFetchMetadata = false;\n    this._observers = [];\n    this._error = undefined;\n    this._uploadUrl = undefined;\n    this._request = undefined;\n    this._chunkMultiplier = 1;\n    this._resolve = undefined;\n    this._reject = undefined;\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = \"running\" /* RUNNING */;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(\"canceled\" /* CANCELED */)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(\"error\" /* ERROR */);\n      }\n    };\n\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(\"canceled\" /* CANCELED */)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(\"error\" /* ERROR */);\n      }\n    };\n\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n  _makeProgressCallback() {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n  _shouldDoResumable(blob) {\n    return blob.size() > 256 * 1024;\n  }\n  _start() {\n    if (this._state !== \"running\" /* RUNNING */) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n  _resolveToken(callback) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([this._ref.storage._getAuthToken(), this._ref.storage._getAppCheckToken()]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case \"running\" /* RUNNING */:\n          callback(authToken, appCheckToken);\n          break;\n        case \"canceling\" /* CANCELING */:\n          this._transition(\"canceled\" /* CANCELED */);\n          break;\n        case \"pausing\" /* PAUSING */:\n          this._transition(\"paused\" /* PAUSED */);\n          break;\n      }\n    });\n  }\n  // TODO(andysoto): assert false\n  _createResumable() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n      const createRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n      this._request = createRequest;\n      createRequest.getPromise().then(url => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n  _fetchStatus() {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl;\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\n      const statusRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n  _continueUpload() {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(this._transferred, this._blob.size());\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl;\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\n      } catch (e) {\n        this._error = e;\n        this._transition(\"error\" /* ERROR */);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then(newStatus => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(\"success\" /* SUCCESS */);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n  _increaseMultiplier() {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n  _fetchMetadata() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\n      const metadataRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(\"success\" /* SUCCESS */);\n      }, this._metadataErrorHandler);\n    });\n  }\n  _oneShotUpload() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n      const multipartRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(\"success\" /* SUCCESS */);\n      }, this._errorHandler);\n    });\n  }\n  _updateProgress(transferred) {\n    const old = this._transferred;\n    this._transferred = transferred;\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n  _transition(state) {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case \"canceling\" /* CANCELING */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case \"pausing\" /* PAUSING */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case \"running\" /* RUNNING */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === \"paused\" /* PAUSED */;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case \"paused\" /* PAUSED */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case \"canceled\" /* CANCELED */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case \"error\" /* ERROR */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case \"success\" /* SUCCESS */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n    }\n  }\n  completeTransitions_() {\n    switch (this._state) {\n      case \"pausing\" /* PAUSING */:\n        this._transition(\"paused\" /* PAUSED */);\n        break;\n      case \"canceling\" /* CANCELING */:\n        this._transition(\"canceled\" /* CANCELED */);\n        break;\n      case \"running\" /* RUNNING */:\n        this._start();\n        break;\n    }\n  }\n  /**\r\n   * A snapshot of the current task state.\r\n   */\n  get snapshot() {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata,\n      task: this,\n      ref: this._ref\n    };\n  }\n  /**\r\n   * Adds a callback for an event.\r\n   * @param type - The type of event to listen for.\r\n   * @param nextOrObserver -\r\n   *     The `next` function, which gets called for each item in\r\n   *     the event stream, or an observer object with some or all of these three\r\n   *     properties (`next`, `error`, `complete`).\r\n   * @param error - A function that gets called with a `StorageError`\r\n   *     if the event stream ends due to an error.\r\n   * @param completed - A function that gets called if the\r\n   *     event stream ends normally.\r\n   * @returns\r\n   *     If only the event argument is passed, returns a function you can use to\r\n   *     add callbacks (see the examples above). If more than just the event\r\n   *     argument is passed, returns a function you can call to unregister the\r\n   *     callbacks.\r\n   */\n  on(type, nextOrObserver, error, completed) {\n    const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n  /**\r\n   * This object behaves like a Promise, and resolves with its snapshot data\r\n   * when the upload completes.\r\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n   * @param onRejected - The rejection callback.\r\n   */\n  then(onFulfilled, onRejected) {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then(onFulfilled, onRejected);\n  }\n  /**\r\n   * Equivalent to calling `then(null, onRejected)`.\r\n   */\n  catch(onRejected) {\n    return this.then(null, onRejected);\n  }\n  /**\r\n   * Adds the given observer.\r\n   */\n  _addObserver(observer) {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n  /**\r\n   * Removes the given observer.\r\n   */\n  _removeObserver(observer) {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n  _notifyObservers() {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n  _finishPromise() {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          async(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject;\n          async(toCall.bind(null, this._error))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n  _notifyObserver(observer) {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          async(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          async(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n    }\n  }\n  /**\r\n   * Resumes a paused task. Has no effect on a currently running or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n  resume() {\n    const valid = this._state === \"paused\" /* PAUSED */ || this._state === \"pausing\" /* PAUSING */;\n    if (valid) {\n      this._transition(\"running\" /* RUNNING */);\n    }\n\n    return valid;\n  }\n  /**\r\n   * Pauses a currently running task. Has no effect on a paused or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n  pause() {\n    const valid = this._state === \"running\" /* RUNNING */;\n    if (valid) {\n      this._transition(\"pausing\" /* PAUSING */);\n    }\n\n    return valid;\n  }\n  /**\r\n   * Cancels a currently running or paused task. Has no effect on a complete or\r\n   * failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n  cancel() {\n    const valid = this._state === \"running\" /* RUNNING */ || this._state === \"pausing\" /* PAUSING */;\n    if (valid) {\n      this._transition(\"canceling\" /* CANCELING */);\n    }\n\n    return valid;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\nclass Reference {\n  constructor(_service, location) {\n    this._service = _service;\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n  /**\r\n   * Returns the URL for the bucket and path this object references,\r\n   *     in the form gs://<bucket>/<object-path>\r\n   * @override\r\n   */\n  toString() {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n  _newRef(service, location) {\n    return new Reference(service, location);\n  }\n  /**\r\n   * A reference to the root of this object's bucket.\r\n   */\n  get root() {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n  /**\r\n   * The name of the bucket containing this reference's object.\r\n   */\n  get bucket() {\n    return this._location.bucket;\n  }\n  /**\r\n   * The full path of this object.\r\n   */\n  get fullPath() {\n    return this._location.path;\n  }\n  /**\r\n   * The short name of this object, which is the last component of the full path.\r\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n   */\n  get name() {\n    return lastComponent(this._location.path);\n  }\n  /**\r\n   * The `StorageService` instance this `StorageReference` is associated with.\r\n   */\n  get storage() {\n    return this._service;\n  }\n  /**\r\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n   * this reference is the root.\r\n   */\n  get parent() {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n  /**\r\n   * Utility function to throw an error in methods that do not accept a root reference.\r\n   */\n  _throwIfRoot(name) {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded bytes.\r\n */\nfunction getBytesInternal(ref, maxDownloadSizeBytes) {\n  ref._throwIfRoot('getBytes');\n  const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n  return ref.storage.makeRequestWithTokens(requestInfo, newBytesConnection).then(bytes => maxDownloadSizeBytes !== undefined ?\n  // GCS may not honor the Range header for small files\n  bytes.slice(0, maxDownloadSizeBytes) : bytes);\n}\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded blob.\r\n */\nfunction getBlobInternal(ref, maxDownloadSizeBytes) {\n  ref._throwIfRoot('getBlob');\n  const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n  return ref.storage.makeRequestWithTokens(requestInfo, newBlobConnection).then(blob => maxDownloadSizeBytes !== undefined ?\n  // GCS may not honor the Range header for small files\n  blob.slice(0, maxDownloadSizeBytes) : blob);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n *\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns A Promise containing an UploadResult\r\n */\nfunction uploadBytes$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then(finalMetadata => {\n    return {\n      metadata: finalMetadata,\n      ref\n    };\n  });\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\nfunction uploadBytesResumable$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - StorageReference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns A Promise containing an UploadResult\r\n */\nfunction uploadString$1(ref, value, format = StringFormat.RAW, metadata) {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = Object.assign({}, metadata);\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType;\n  }\n  return uploadBytes$1(ref, data.data, metadataClone);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\nfunction listAll$1(ref) {\n  const accumulator = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\nasync function listAllHelper(ref, accumulator, pageToken) {\n  const opt = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list$1(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\nfunction list$1(ref, options) {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber('options.maxResults', /* minValue= */1, /* maxValue= */1000, options.maxResults);\n    }\n  }\n  const op = options || {};\n  const requestInfo = list$2(ref.storage, ref._location, /*delimiter= */'/', op.pageToken, op.maxResults);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\nfunction getMetadata$1(ref) {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\nfunction updateMetadata$1(ref, metadata) {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\nfunction getDownloadURL$1(ref) {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then(url => {\n    if (url === null) {\n      throw noDownloadURL();\n    }\n    return url;\n  });\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\nfunction deleteObject$1(ref) {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = deleteObject$2(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\nfunction _getChild$1(ref, childPath) {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\nfunction refFromURL(service, url) {\n  return new Reference(service, url);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\nfunction refFromPath(ref, path) {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild$1(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\nfunction ref$1(serviceOrRef, pathOrUrl) {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\nfunction extractBucket(host, config) {\n  const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\nfunction connectStorageEmulator$1(storage, host, port, options = {}) {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const {\n    mockUserToken\n  } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken = typeof mockUserToken === 'string' ? mockUserToken : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n *\r\n * @internal\r\n */\nclass FirebaseStorageImpl {\n  constructor(\n  /**\r\n   * FirebaseApp associated with this StorageService instance.\r\n   */\n  app, _authProvider,\n  /**\r\n   * @internal\r\n   */\n  _appCheckProvider,\n  /**\r\n   * @internal\r\n   */\n  _url, _firebaseVersion) {\n    this.app = app;\n    this._authProvider = _authProvider;\n    this._appCheckProvider = _appCheckProvider;\n    this._url = _url;\n    this._firebaseVersion = _firebaseVersion;\n    this._bucket = null;\n    /**\r\n     * This string can be in the formats:\r\n     * - host\r\n     * - host:port\r\n     */\n    this._host = DEFAULT_HOST;\n    this._protocol = 'https';\n    this._appId = null;\n    this._deleted = false;\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n  /**\r\n   * The host string for this service, in the form of `host` or\r\n   * `host:port`.\r\n   */\n  get host() {\n    return this._host;\n  }\n  set host(host) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n  /**\r\n   * The maximum time to retry uploads in milliseconds.\r\n   */\n  get maxUploadRetryTime() {\n    return this._maxUploadRetryTime;\n  }\n  set maxUploadRetryTime(time) {\n    validateNumber('time', /* minValue=*/0, /* maxValue= */Number.POSITIVE_INFINITY, time);\n    this._maxUploadRetryTime = time;\n  }\n  /**\r\n   * The maximum time to retry operations other than uploads or downloads in\r\n   * milliseconds.\r\n   */\n  get maxOperationRetryTime() {\n    return this._maxOperationRetryTime;\n  }\n  set maxOperationRetryTime(time) {\n    validateNumber('time', /* minValue=*/0, /* maxValue= */Number.POSITIVE_INFINITY, time);\n    this._maxOperationRetryTime = time;\n  }\n  async _getAuthToken() {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n    const auth = this._authProvider.getImmediate({\n      optional: true\n    });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n  async _getAppCheckToken() {\n    const appCheck = this._appCheckProvider.getImmediate({\n      optional: true\n    });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n  /**\r\n   * Stop running requests and prevent more from being created.\r\n   */\n  _delete() {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n  /**\r\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n   * at the given Location.\r\n   */\n  _makeStorageReference(loc) {\n    return new Reference(this, loc);\n  }\n  /**\r\n   * @param requestInfo - HTTP RequestInfo object\r\n   * @param authToken - Firebase auth token\r\n   */\n  _makeRequest(requestInfo, requestFactory, authToken, appCheckToken) {\n    if (!this._deleted) {\n      const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion);\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n  async makeRequestWithTokens(requestInfo, requestFactory) {\n    const [authToken, appCheckToken] = await Promise.all([this._getAuthToken(), this._getAppCheckToken()]);\n    return this._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();\n  }\n}\nconst name = \"@firebase/storage\";\nconst version = \"0.9.9\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Type constant for Firebase Storage.\r\n */\nconst STORAGE_TYPE = 'storage';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise containing the object's bytes\r\n */\nfunction getBytes(ref, maxDownloadSizeBytes) {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref, maxDownloadSizeBytes);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\nfunction uploadBytes(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytes$1(ref, data, metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the string to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\nfunction uploadString(ref, value, format, metadata) {\n  ref = getModularInstance(ref);\n  return uploadString$1(ref, value, format, metadata);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\nfunction uploadBytesResumable(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytesResumable$1(ref, data, metadata);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\nfunction getMetadata(ref) {\n  ref = getModularInstance(ref);\n  return getMetadata$1(ref);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\nfunction updateMetadata(ref, metadata) {\n  ref = getModularInstance(ref);\n  return updateMetadata$1(ref, metadata);\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\nfunction list(ref, options) {\n  ref = getModularInstance(ref);\n  return list$1(ref, options);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\nfunction listAll(ref) {\n  ref = getModularInstance(ref);\n  return listAll$1(ref);\n}\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\nfunction getDownloadURL(ref) {\n  ref = getModularInstance(ref);\n  return getDownloadURL$1(ref);\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\nfunction deleteObject(ref) {\n  ref = getModularInstance(ref);\n  return deleteObject$1(ref);\n}\nfunction ref(serviceOrRef, pathOrUrl) {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return ref$1(serviceOrRef, pathOrUrl);\n}\n/**\r\n * @internal\r\n */\nfunction _getChild(ref, childPath) {\n  return _getChild$1(ref, childPath);\n}\n/**\r\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\r\n * @public\r\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\r\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\r\n * If not passed, uses the app's default Storage Bucket.\r\n * @returns A {@link FirebaseStorage} instance.\r\n */\nfunction getStorage(app = getApp(), bucketUrl) {\n  app = getModularInstance(app);\n  const storageProvider = _getProvider(app, STORAGE_TYPE);\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  return storageInstance;\n}\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\r\n * token to use for unit testing Security Rules.\r\n * @public\r\n */\nfunction connectStorageEmulator(storage, host, port, options = {}) {\n  connectStorageEmulator$1(storage, host, port, options);\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * This API is not available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise that resolves with a Blob containing the object's bytes\r\n */\nfunction getBlob(ref, maxDownloadSizeBytes) {\n  ref = getModularInstance(ref);\n  return getBlobInternal(ref, maxDownloadSizeBytes);\n}\n/**\r\n * Downloads the data at the object's location. Raises an error event if the\r\n * object is not found.\r\n *\r\n * This API is only available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A stream with the object's data as bytes\r\n */\nfunction getStream(ref, maxDownloadSizeBytes) {\n  throw new Error('getStream() is only supported by NodeJS builds');\n}\n\n/**\r\n * Cloud Storage for Firebase\r\n *\r\n * @packageDocumentation\r\n */\nfunction factory(container, {\n  instanceIdentifier: url\n}) {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n  return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\n}\nfunction registerStorage() {\n  _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\n  //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n  registerVersion(name, version, '');\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, 'esm2017');\n}\nregisterStorage();\nexport { StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };","map":{"version":3,"mappings":"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","names":["DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","StorageError","FirebaseError","constructor","message","prependCode","code","serverResponse","_baseMessage","Object","setPrototypeOf","prototype","_codeEquals","customData","unknown","objectNotFound","path","quotaExceeded","bucket","unauthenticated","unauthorizedApp","unauthorized","retryLimitExceeded","canceled","invalidUrl","url","invalidDefaultBucket","noDefaultBucket","cannotSliceBlob","serverFileWrongSize","noDownloadURL","invalidArgument","appDeleted","invalidRootOperation","name","invalidFormat","format","internalError","Location","path_","isRoot","length","fullServerUrl","encode","encodeURIComponent","bucketOnlyServerUrl","makeFromBucketSpec","bucketString","host","bucketLocation","makeFromUrl","e","location","bucketDomain","gsModify","loc","charAt","slice","gsPath","gsRegex","RegExp","gsIndices","httpModify","decodeURIComponent","version","firebaseStorageHost","replace","firebaseStoragePath","firebaseStorageRegExp","firebaseStorageIndices","cloudStorageHost","cloudStoragePath","cloudStorageRegExp","cloudStorageIndices","groups","regex","indices","postModify","i","group","captures","exec","bucketValue","pathValue","FailRequest","error","promise_","Promise","reject","getPromise","cancel","_appDelete","start","f","callback","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","apply","callWithDelay","millis","setTimeout","handler","clearGlobalTimeout","clearTimeout","success","call","mustStop","waitMillis","Math","random","stopped","stop","wasTimeout","id","isJustDef","p","isFunction","isNonArrayObject","Array","isArray","isString","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","value","makeUrl","urlPart","protocol","origin","makeQueryString","params","queryPart","key","hasOwnProperty","nextPart","ErrorCode","NetworkRequest","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","url_","resolve","resolve_","reject_","start_","doTheRequest","backoffCallback","RequestEndStatus","connection","pendingConnection_","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","send","then","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","status","getStatus","isRetryStatusCode_","wasCanceled","ABORT","successCode","indexOf","backoffDone","requestWentThrough","wasSuccessCode","result","getResponse","err","getErrorText","appDelete_","canceled_","backoffId_","appDelete","abort","isFiveHundredCode","extraRetryCodes","isExtraRetryCode","isRequestSpecificRetryCode","addAuthHeader_","headers","authToken","addVersionHeader_","firebaseVersion","addGmpidHeader_","appId","addAppCheckHeader_","appCheckToken","makeRequest","requestInfo","requestFactory","urlParams","assign","method","body","successCodes","additionalRetryCodes","errorHandler","progressCallback","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","undefined","getBlob$1","bb","append","getBlob","sliceBlob","blob","end","webkitSlice","mozSlice","decodeBase64","encoded","atob","RAW","BASE64","BASE64URL","DATA_URL","StringData","contentType","data","dataFromString","stringData","StringFormat","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","b","c","charCodeAt","push","valid","hi","lo","Uint8Array","percentEncodedBytes_","decoded","hasMinus","hasUnder","invalidChar","hasPlus","hasSlash","bytes","array","DataURLParts","dataURL","matches","match","middle","base64","endsWith","substring","rest","dataUrl","parts","s","longEnough","FbsBlob","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","set","size_","type_","startByte","endByte","realBlob","sliced","buffer","blobby","map","val","uint8Arrays","finalLength","forEach","merged","index","uploadData","jsonObjectOrNull","obj","JSON","parse","parent","lastIndexOf","newPath","child","childPath","canonicalChildPath","split","filter","component","join","lastComponent","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","xformPath","fullPath","getMappings","mappings","mappingsXformPath","_metadata","nameMapping","xformSize","Number","sizeMapping","addRef","service","generateRef","_makeStorageReference","defineProperty","get","fromResource","resource","len","mapping","fromResourceString","resourceString","downloadUrlFromResourceString","tokens","tokensList","urls","token","base","queryString","alt","toResourceString","stringify","PREFIXES_KEY","ITEMS_KEY","fromBackendResponse","listResult","prefixes","items","nextPageToken","pathWithoutTrailingSlash","reference","item","fromResponseString","RequestInfo","handlerCheck","cndn","metadataHandler","xhr","text","listHandler","downloadUrlHandler","_protocol","sharedErrorHandler","newErr","includes","objectErrorHandler","shared","getMetadata","getMetadata$2","maxOperationRetryTime","list","list$2","delimiter","pageToken","maxResults","getBytes","getBytes$1","maxDownloadSizeBytes","_","getDownloadUrl","updateMetadata","updateMetadata$2","deleteObject$2","_xhr","_text","determineContentType_","metadataForUpload_","metadataClone","multipartUpload","genBoundary","str","toString","boundary","metadata_","metadataString","preBlobPart","postBlobPart","maxUploadRetryTime","ResumableUploadStatus","current","finalized","checkResumeHeader_","allowed","getResponseHeader","allowedStatus","createResumableUpload","metadataForUpload","getResumableUploadStatus","sizeString","isNaN","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","status_","bytesLeft","bytesToUpload","min","uploadCommand","uploadStatus","newCurrent","STATE_CHANGED","RUNNING","PAUSED","SUCCESS","CANCELED","ERROR","taskStateFromInternalTaskState","state","TaskState","Observer","nextOrObserver","complete","asFunctions","next","observer","async","argsToForward","textFactoryOverride","XhrConnection","xhr_","XMLHttpRequest","initXhr","errorCode_","sendPromise_","addEventListener","NETWORK_ERROR","sent_","open","setRequestHeader","response","statusText","header","listener","upload","removeEventListener","XhrTextConnection","responseType","newTextConnection","XhrBytesConnection","newBytesConnection","XhrBlobConnection","newBlobConnection","UploadTask","ref","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","_request","_chunkMultiplier","_needToFetchStatus","completeTransitions_","_error","_transition","_metadataErrorHandler","_promise","_resolve","_reject","_start","_makeProgressCallback","sizeBefore","_transferred","_updateProgress","_uploadUrl","_createResumable","_fetchStatus","_needToFetchMetadata","_fetchMetadata","_continueUpload","_oneShotUpload","_resolveToken","all","storage","_getAuthToken","_getAppCheckToken","_location","createRequest","_makeRequest","statusRequest","uploadRequest","newStatus","_increaseMultiplier","currentSize","metadataRequest","multipartRequest","transferred","old","_notifyObservers","wasPaused","snapshot","externalState","bytesTransferred","totalBytes","task","on","completed","_addObserver","_removeObserver","onFulfilled","onRejected","catch","_observers","_notifyObserver","splice","_finishPromise","observers","triggered","fbsAsync","bind","toCall","resume","pause","Reference","_service","_newRef","root","_throwIfRoot","getBytesInternal","makeRequestWithTokens","getBlobInternal","uploadBytes","uploadBytes$1","finalMetadata","uploadBytesResumable","uploadBytesResumable$1","uploadString$1","listAll","listAll$1","accumulator","listAllHelper","opt","nextPage","list$1","options","op","requestsList","getMetadata$1","requestsGetMetadata","updateMetadata$1","requestsUpdateMetadata","getDownloadURL","getDownloadURL$1","requestsGetDownloadUrl","deleteObject","deleteObject$1","requestsDeleteObject","_getChild$1","isUrl","test","refFromURL","refFromPath","FirebaseStorageImpl","_bucket","_getChild","ref$1","serviceOrRef","pathOrUrl","extractBucket","config","connectStorageEmulator","connectStorageEmulator$1","port","mockUserToken","_overrideAuthToken","createMockUserToken","app","projectId","_authProvider","_appCheckProvider","_url","_firebaseVersion","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","_host","time","POSITIVE_INFINITY","auth","getImmediate","optional","tokenData","getToken","accessToken","appCheck","_delete","_deleted","request","clear","_appId","add","delete","STORAGE_TYPE","getModularInstance","uploadBytesInternal","uploadString","uploadStringInternal","uploadBytesResumableInternal","getMetadataInternal","updateMetadataInternal","listInternal","listAllInternal","getDownloadURLInternal","deleteObjectInternal","refInternal","_getChildInternal","getStorage","getApp","bucketUrl","storageProvider","_getProvider","storageInstance","identifier","connectEmulatorInternal","getStream","Error","factory","container","instanceIdentifier","getProvider","authProvider","appCheckProvider","SDK_VERSION","registerStorage","_registerComponent","Component","setMultipleInstances","registerVersion"],"sources":["E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\constants.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\error.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\location.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\failrequest.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\backoff.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\type.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\url.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\connection.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\request.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\fs.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\platform\\browser\\base64.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\string.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\blob.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\json.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\path.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\metadata.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\list.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\requestinfo.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\requests.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\taskenums.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\observer.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\implementation\\async.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\platform\\browser\\connection.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\task.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\reference.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\service.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\constants.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\api.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\api.browser.ts","E:\\github-projects\\kidtube\\frontend\\node_modules\\@firebase\\storage\\src\\index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class StorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unque to StorageError.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   */\n  constructor(code: StorageErrorCode, message: string) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n\n  /**\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `StorageError`s.\n */\nexport const enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  UNAUTHORIZED_APP = 'unauthorized-app',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): StorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): StorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorizedApp(): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED_APP,\n    'This app does not have permission to access Firebase Storage on this project.'\n  );\n}\n\nexport function unauthorized(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): StorageError {\n  return new StorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): StorageError {\n  return new StorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\n/**\n * @internal\n */\nexport function invalidArgument(message: string): StorageError {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): StorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new StorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): StorageError {\n  return new StorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n *\n * @internal\n */\nexport function invalidRootOperation(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(format: string, message: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): StorageError {\n  throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, message);\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): StorageError {\n  throw new StorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string, host: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string, host: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      host === DEFAULT_HOST\n        ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n        : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: StorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * @param f May be invoked\n *     before the function returns.\n * @param callback Get all the arguments passed to the function\n *     passed to f, including the initial boolean.\n */\nexport function start(\n  f: (p1: (success: boolean) => void, canceled: boolean) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let retryTimeoutId: any = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let globalTimeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout(): void {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function handler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    clearGlobalTimeout();\n    if (triggeredCallback) {\n      return;\n    }\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  return typeof Blob !== 'undefined';\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(\n  urlPart: string,\n  host: string,\n  protocol: string\n): string {\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Network headers */\nexport type Headers = Record<string, string>;\n\n/** Response type exposed by the networking APIs. */\nexport type ConnectionType =\n  | string\n  | ArrayBuffer\n  | Blob\n  | NodeJS.ReadableStream;\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n *\n * You can create a new connection by invoking `newTextConnection()`,\n * `newBytesConnection()` or `newStreamConnection()`.\n */\nexport interface Connection<T extends ConnectionType> {\n  /**\n   * Sends a request to the provided URL.\n   *\n   * This method never rejects its promise. In case of encountering an error,\n   * it sets an error code internally which can be accessed by calling\n   * getErrorCode() by callers.\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<void>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponse(): T;\n\n  getErrorText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { id as backoffId, start, stop } from './backoff';\nimport { appDeleted, canceled, retryLimitExceeded, unknown } from './error';\nimport { ErrorHandler, RequestHandler, RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Connection, ErrorCode, Headers, ConnectionType } from './connection';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\n/**\n * Handles network logic for all Storage Requests, including error reporting and\n * retries with backoff.\n *\n * @param I - the type of the backend's network response.\n * @param - O the output type used by the rest of the SDK. The conversion\n * happens in the specified `callback_`.\n */\nclass NetworkRequest<I extends ConnectionType, O> implements Request<O> {\n  private pendingConnection_: Connection<I> | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: O | PromiseLike<O>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private promise_: Promise<O>;\n\n  constructor(\n    private url_: string,\n    private method_: string,\n    private headers_: Headers,\n    private body_: string | Blob | Uint8Array | null,\n    private successCodes_: number[],\n    private additionalRetryCodes_: number[],\n    private callback_: RequestHandler<I, O>,\n    private errorCallback_: ErrorHandler | null,\n    private timeout_: number,\n    private progressCallback_: ((p1: number, p2: number) => void) | null,\n    private connectionFactory_: () => Connection<I>\n  ) {\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: O | PromiseLike<O>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const doTheRequest: (\n      backoffCallback: (success: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ) => void = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n\n      const progressListener: (progressEvent: ProgressEvent) => void =\n        progressEvent => {\n          const loaded = progressEvent.loaded;\n          const total = progressEvent.lengthComputable\n            ? progressEvent.total\n            : -1;\n          if (this.progressCallback_ !== null) {\n            this.progressCallback_(loaded, total);\n          }\n        };\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n\n      // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection\n        .send(this.url_, this.method_, this.body_, this.headers_)\n        .then(() => {\n          if (this.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n          this.pendingConnection_ = null;\n          const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = connection.getStatus();\n          if (!hitServer || this.isRetryStatusCode_(status)) {\n            const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = this.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n    };\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    const backoffDone: (\n      requestWentThrough: boolean,\n      status: RequestEndStatus<I>\n    ) => void = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection as Connection<I>;\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<O> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n\n  private isRetryStatusCode_(status: number): boolean {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [\n      // Request Timeout: web server didn't receive full request in time.\n      408,\n      // Too Many Requests: you're getting rate-limited, basically.\n      429\n    ];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode =\n      this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus<I extends ConnectionType> {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public connection: Connection<I> | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function addAppCheckHeader_(\n  headers: Headers,\n  appCheckToken: string | null\n): void {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nexport function makeRequest<I extends ConnectionType, O>(\n  requestInfo: RequestInfo<I, O>,\n  appId: string | null,\n  authToken: string | null,\n  appCheckToken: string | null,\n  requestFactory: () => Connection<I>,\n  firebaseVersion?: string\n): Request<O> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest<I, O>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    requestFactory\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, StorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  return atob(encoded);\n}\n\nexport function decodeUint8Array(data: Uint8Array): string {\n  return new TextDecoder().decode(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\nimport { decodeBase64 } from '../platform/base64';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = typeof StringFormat[keyof typeof StringFormat];\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n} as const;\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\n/**\n * @internal\n */\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { FirebaseStorageImpl } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: FirebaseStorageImpl): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: FirebaseStorageImpl,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: FirebaseStorageImpl,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string,\n  host: string,\n  protocol: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport { jsonObjectOrNull } from './json';\nimport { ListResult } from '../list';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service._makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as unknown as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Headers, Connection, ConnectionType } from './connection';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\n/**\n * A function that converts a server response to the API type expected by the\n * SDK.\n *\n * @param I - the type of the backend's network response\n * @param O - the output response type used by the rest of the SDK.\n */\nexport type RequestHandler<I extends ConnectionType, O> = (\n  connection: Connection<I>,\n  response: I\n) => O;\n\n/** A function to handle an error. */\nexport type ErrorHandler = (\n  connection: Connection<ConnectionType>,\n  response: StorageError\n) => StorageError;\n\n/**\n * Contains a fully specified request.\n *\n * @param I - the type of the backend's network response.\n * @param O - the output response type used by the rest of the SDK.\n */\nexport class RequestInfo<I extends ConnectionType, O> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n  errorHandler: ErrorHandler | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: RequestHandler<I, O>,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  StorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown,\n  unauthorizedApp\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { Connection, ConnectionType } from './connection';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Throws the UNKNOWN StorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => Metadata {\n  function handler(xhr: Connection<string>, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: FirebaseStorageImpl,\n  bucket: string\n): (p1: Connection<string>, p2: string) => ListResult {\n  function handler(xhr: Connection<string>, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => string | null {\n  function handler(xhr: Connection<string>, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(\n      metadata as Metadata,\n      text,\n      service.host,\n      service._protocol\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      if (\n        // This exact message string is the only consistent part of the\n        // server's error response that identifies it as an App Check error.\n        xhr.getErrorText().includes('Firebase App Check token is invalid')\n      ) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: FirebaseStorageImpl,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<string, ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getBytes<I extends ConnectionType>(\n  service: FirebaseStorageImpl,\n  location: Location,\n  maxDownloadSizeBytes?: number\n): RequestInfo<I, I> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    (_: Connection<I>, data: I) => data,\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n  }\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: FirebaseStorageImpl,\n  location: Location\n): RequestInfo<string, void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: Connection<string>, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(\n  xhr: Connection<string>,\n  allowed?: string[]\n): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: Connection<string>): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: FirebaseStorageImpl,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<string, ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: Connection<string>): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: FirebaseStorageImpl,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<string, ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand =\n    bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(\n    xhr: Connection<string>,\n    text: string\n  ): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport type TaskEvent = string;\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport const TaskEvent = {\n  /**\n   * For this event,\n   * <ul>\n   *   <li>The `next` function is triggered on progress updates and when the\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n   *       argument.</li>\n   *   <li>The `error` function is triggered if the upload is canceled or fails\n   *       for another reason.</li>\n   *   <li>The `complete` function is triggered if the upload completes\n   *       successfully.</li>\n   * </ul>\n   */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport const enum InternalTaskState {\n  RUNNING = 'running',\n  PAUSING = 'pausing',\n  PAUSED = 'paused',\n  SUCCESS = 'success',\n  CANCELING = 'canceling',\n  CANCELED = 'canceled',\n  ERROR = 'error'\n}\n\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport type TaskState = typeof TaskState[keyof typeof TaskState];\n\n// type keys = keyof TaskState\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n} as const;\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFunction } from './type';\nimport { StorageError } from './error';\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `StorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: StorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * An observer identical to the `Observer` defined in packages/util except the\n * error passed into the ErrorFn is specifically a `StorageError`.\n */\nexport interface StorageObserver<T> {\n  /**\n   * Function that is called once for each value in the event stream.\n   */\n  next?: NextFn<T>;\n  /**\n   * A function that is called with a `StorageError`\n   * if the event stream ends due to an error.\n   */\n  error?: ErrorFn;\n  /**\n   * A function that is called if the event stream ends normally.\n   */\n  complete?: CompleteFn;\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error ?? undefined;\n      this.complete = complete ?? undefined;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Connection,\n  ConnectionType,\n  ErrorCode,\n  Headers\n} from '../../implementation/connection';\nimport { internalError } from '../../implementation/error';\n\n/** An override for the text-based Connection. Used in tests. */\nlet textFactoryOverride: (() => Connection<string>) | null = null;\n\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nabstract class XhrConnection<T extends ConnectionType>\n  implements Connection<T>\n{\n  protected xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<void>;\n  protected sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  abstract initXhr(): void;\n\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<void> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  getResponse(): T {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n    return this.xhr_.response;\n  }\n\n  getErrorText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n    return this.xhr_.statusText;\n  }\n\n  /** Aborts the request. */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n\nexport class XhrTextConnection extends XhrConnection<string> {\n  initXhr(): void {\n    this.xhr_.responseType = 'text';\n  }\n}\n\nexport function newTextConnection(): Connection<string> {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\n\nexport class XhrBytesConnection extends XhrConnection<ArrayBuffer> {\n  private data_?: ArrayBuffer;\n\n  initXhr(): void {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n}\n\nexport function newBytesConnection(): Connection<ArrayBuffer> {\n  return new XhrBytesConnection();\n}\n\nexport class XhrBlobConnection extends XhrConnection<Blob> {\n  initXhr(): void {\n    this.xhr_.responseType = 'blob';\n  }\n}\n\nexport function newBlobConnection(): Connection<Blob> {\n  return new XhrBlobConnection();\n}\n\nexport function newStreamConnection(): Connection<NodeJS.ReadableStream> {\n  throw new Error('Streams are only supported on Node');\n}\n\nexport function injectTestConnection(\n  factory: (() => Connection<string>) | null\n): void {\n  textFactoryOverride = factory;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport {\n  canceled,\n  StorageErrorCode,\n  StorageError\n} from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  Observer,\n  Subscribe,\n  Unsubscribe,\n  StorageObserver as StorageObserverInternal,\n  NextFn\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot, StorageObserver } from './public-types';\nimport { async as fbsAsync } from './implementation/async';\nimport { Mappings, getMappings } from './implementation/metadata';\nimport {\n  createResumableUpload,\n  getResumableUploadStatus,\n  RESUMABLE_UPLOAD_CHUNK_SIZE,\n  ResumableUploadStatus,\n  continueResumableUpload,\n  getMetadata,\n  multipartUpload\n} from './implementation/requests';\nimport { Reference } from './reference';\nimport { newTextConnection } from './platform/connection';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * The data to be uploaded.\n   */\n  _blob: FbsBlob;\n  /**\n   * Metadata related to the upload.\n   */\n  _metadata: Metadata | null;\n  private _mappings: Mappings;\n  /**\n   * Number of bytes transferred so far.\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserverInternal<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * Upload state.\n   */\n  _state: InternalTaskState;\n  private _error?: StorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: StorageError) => void;\n  private _metadataErrorHandler: (p1: StorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: StorageError) => void = undefined;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(\n    callback: (authToken: string | null, appCheckToken: string | null) => void\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([\n      this._ref.storage._getAuthToken(),\n      this._ref.storage._getAppCheckToken()\n    ]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken, appCheckToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e as StorageError;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then((newStatus: ResumableUploadStatus) => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(InternalTaskState.SUCCESS);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  /**\n   * A snapshot of the current task state.\n   */\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata!,\n      task: this,\n      ref: this._ref\n    };\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   * @param nextOrObserver -\n   *     The `next` function, which gets called for each item in\n   *     the event stream, or an observer object with some or all of these three\n   *     properties (`next`, `error`, `complete`).\n   * @param error - A function that gets called with a `StorageError`\n   *     if the event stream ends due to an error.\n   * @param completed - A function that gets called if the\n   *     event stream ends normally.\n   * @returns\n   *     If only the event argument is passed, returns a function you can use to\n   *     add callbacks (see the examples above). If more than just the event\n   *     argument is passed, returns a function you can call to unregister the\n   *     callbacks.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | null\n      | ((snapshot: UploadTaskSnapshot) => unknown),\n    error?: ((a: StorageError) => unknown) | null,\n    completed?: Unsubscribe | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    const observer = new Observer(\n      (nextOrObserver as\n        | StorageObserverInternal<UploadTaskSnapshot>\n        | NextFn<UploadTaskSnapshot>) || undefined,\n      error || undefined,\n      completed || undefined\n    );\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: StorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(onRejected: (p1: StorageError) => T | Promise<T>): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: StorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as StorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { PassThrough, Transform, TransformOptions } from 'stream';\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, lastComponent, parent } from './implementation/path';\nimport {\n  deleteObject as requestsDeleteObject,\n  getBytes,\n  getDownloadUrl as requestsGetDownloadUrl,\n  getMetadata as requestsGetMetadata,\n  list as requestsList,\n  multipartUpload,\n  updateMetadata as requestsUpdateMetadata\n} from './implementation/requests';\nimport { ListOptions, UploadResult } from './public-types';\nimport { dataFromString, StringFormat } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { FirebaseStorageImpl } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport {\n  newBlobConnection,\n  newBytesConnection,\n  newStreamConnection,\n  newTextConnection\n} from './platform/connection';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(\n    private _service: FirebaseStorageImpl,\n    location: string | Location\n  ) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(\n    service: FirebaseStorageImpl,\n    location: Location\n  ): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): FirebaseStorageImpl {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded bytes.\n */\nexport function getBytesInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref._throwIfRoot('getBytes');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBytesConnection)\n    .then(bytes =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (bytes as ArrayBuffer).slice(0, maxDownloadSizeBytes)\n        : (bytes as ArrayBuffer)\n    );\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded blob.\n */\nexport function getBlobInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref._throwIfRoot('getBlob');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBlobConnection)\n    .then(blob =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (blob as Blob).slice(0, maxDownloadSizeBytes)\n        : (blob as Blob)\n    );\n}\n\n/** Stream the bytes at the object's location. */\nexport function getStreamInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  ref._throwIfRoot('getStream');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n\n  /** A transformer that passes through the first n bytes. */\n  const newMaxSizeTransform: (n: number) => TransformOptions = n => {\n    let missingBytes = n;\n    return {\n      transform(chunk, encoding, callback) {\n        // GCS may not honor the Range header for small files\n        if (chunk.length < missingBytes) {\n          this.push(chunk);\n          missingBytes -= chunk.length;\n        } else {\n          this.push(chunk.slice(0, missingBytes));\n          this.emit('end');\n        }\n        callback();\n      }\n    } as TransformOptions;\n  };\n\n  const result =\n    maxDownloadSizeBytes !== undefined\n      ? new Transform(newMaxSizeTransform(maxDownloadSizeBytes))\n      : new PassThrough();\n\n  ref.storage\n    .makeRequestWithTokens(requestInfo, newStreamConnection)\n    .then(stream => (stream as NodeJS.ReadableStream).pipe(result))\n    .catch(e => result.destroy(e));\n  return result;\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(\n    ref.storage,\n    ref._location,\n    getMappings(),\n    new FbsBlob(data, true),\n    metadata\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_HOST,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from './implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { FirebaseStorage } from './public-types';\nimport { createMockUserToken, EmulatorMockTokenOptions } from '@firebase/util';\nimport { Connection, ConnectionType } from './implementation/connection';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: FirebaseStorageImpl, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorageImpl, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: FirebaseStorageImpl | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(\n  host: string,\n  config?: FirebaseOptions\n): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nexport function connectStorageEmulator(\n  storage: FirebaseStorageImpl,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const { mockUserToken } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken =\n      typeof mockUserToken === 'string'\n        ? mockUserToken\n        : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n *\n * @internal\n */\nexport class FirebaseStorageImpl implements FirebaseStorage {\n  _bucket: Location | null = null;\n  /**\n   * This string can be in the formats:\n   * - host\n   * - host:port\n   */\n  private _host: string = DEFAULT_HOST;\n  _protocol: string = 'https';\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n  _overrideAuthToken?: string;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _appCheckProvider: Provider<AppCheckInternalComponentName>,\n    /**\n     * @internal\n     */\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n\n  /**\n   * The host string for this service, in the form of `host` or\n   * `host:port`.\n   */\n  get host(): string {\n    return this._host;\n  }\n\n  set host(host: string) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  async _getAppCheckToken(): Promise<string | null> {\n    const appCheck = this._appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>,\n    authToken: string | null,\n    appCheckToken: string | null\n  ): Request<O> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        appCheckToken,\n        requestFactory,\n        this._firebaseVersion\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  async makeRequestWithTokens<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>\n  ): Promise<O> {\n    const [authToken, appCheckToken] = await Promise.all([\n      this._getAuthToken(),\n      this._getAppCheckToken()\n    ]);\n\n    return this._makeRequest(\n      requestInfo,\n      requestFactory,\n      authToken,\n      appCheckToken\n    ).getPromise();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Storage.\n */\nexport const STORAGE_TYPE = 'storage';\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\n\nimport {\n  ref as refInternal,\n  FirebaseStorageImpl,\n  connectStorageEmulator as connectEmulatorInternal\n} from './service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  FirebaseStorage,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from './metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal,\n  getBytesInternal\n} from './reference';\nimport { STORAGE_TYPE } from './constants';\nimport { EmulatorMockTokenOptions, getModularInstance } from '@firebase/util';\nimport { StringFormat } from './implementation/string';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from './implementation/location';\nexport { UploadTask as _UploadTask } from './task';\nexport type { Reference as _Reference } from './reference';\nexport type { FirebaseStorageImpl as _FirebaseStorageImpl } from './service';\nexport { FbsBlob as _FbsBlob } from './implementation/blob';\nexport { dataFromString as _dataFromString } from './implementation/string';\nexport {\n  invalidRootOperation as _invalidRootOperation,\n  invalidArgument as _invalidArgument\n} from './implementation/error';\nexport {\n  TaskEvent as _TaskEvent,\n  TaskState as _TaskState\n} from './implementation/taskenums';\nexport { StringFormat };\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise containing the object's bytes\n */\nexport function getBytes(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: StringFormat,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a {@link StorageReference} for the given url.\n * @param storage - {@link FirebaseStorage} instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorage, url?: string): StorageReference;\n/**\n * Returns a {@link StorageReference} for the given path in the\n * default bucket.\n * @param storageOrRef - {@link FirebaseStorage} or {@link StorageReference}.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if {@link FirebaseStorage}\n * instance provided) or returns same reference (if {@link StorageReference} provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorage | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: FirebaseStorage | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as FirebaseStorageImpl | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): FirebaseStorage {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage'> = _getProvider(app, STORAGE_TYPE);\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  return storageInstance;\n}\n\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\n * token to use for unit testing Security Rules.\n * @public\n */\nexport function connectStorageEmulator(\n  storage: FirebaseStorage,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  connectEmulatorInternal(storage as FirebaseStorageImpl, host, port, options);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StorageReference } from './public-types';\nimport { Reference, getBlobInternal } from './reference';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * This API is not available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise that resolves with a Blob containing the object's bytes\n */\nexport function getBlob(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref = getModularInstance(ref);\n  return getBlobInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Downloads the data at the object's location. Raises an error event if the\n * object is not found.\n *\n * This API is only available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A stream with the object's data as bytes\n */\nexport function getStream(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  throw new Error('getStream() is only supported by NodeJS builds');\n}\n","/**\n * Cloud Storage for Firebase\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\n\nimport { FirebaseStorageImpl } from '../src/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\nimport { FirebaseStorage } from './public-types';\nimport { STORAGE_TYPE } from './constants';\n\nexport * from './api';\nexport * from './api.browser';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): FirebaseStorage {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n\n  return new FirebaseStorageImpl(\n    app,\n    authProvider,\n    appCheckProvider,\n    url,\n    SDK_VERSION\n  );\n}\n\nfunction registerStorage(): void {\n  _registerComponent(\n    new Component(\n      STORAGE_TYPE,\n      factory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n  registerVersion(name, version, '__RUNTIME_ENV__');\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterStorage();\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}